$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - set session omni_httpd.init_port = 0
  - create extension omni_httpd cascade
  - create extension omni_httpc cascade
  # FIXME: waiting for two reloads is working around a startup bug in omni_httpd
  - call omni_httpd.wait_for_configuration_reloads(2)
  - create extension omni_rest cascade
  - create schema app
  - |
    create
        or
        replace function omni_httpd.handler(int, omni_httpd.http_request) returns omni_httpd.http_outcome
        language plpgsql
    as
    $$
    declare
        req omni_httpd.http_request;
        resp omni_httpd.http_outcome;
    begin
        req := $2;
        call omni_rest.postgrest(req, resp, omni_rest.postgrest_settings(schemas => '{app}'));
        if resp is not distinct from null then
            resp := omni_httpd.http_response(status => 404);
        end if;
        return resp;
    end;
    $$
  - |
    create function make_request(path text, headers omni_http.http_headers default array []::omni_http.http_headers, method omni_http.http_method default 'GET') returns setof omni_httpc.http_response
        language sql as
    $$
    select *
    from omni_httpc.http_execute(
            omni_httpc.http_request('http://127.0.0.1:' ||
                                    (select effective_port from omni_httpd.listeners) ||
                                    path, headers => headers, method => method))
    $$
  - |
    create function app.ping() returns text language sql as $$ SELECT 'pong'; $$;
    

tests:

- name: Error case for function not found
  query: |
    with response as (select * from make_request('/rpc/non_existing_function'))
    select response.status
    from response
  results:
  - status: 404

- name: Single text result
  query: |
    with response as (select * from make_request('/rpc/ping'))
    select response.status,
           (select json_agg(json_build_object(h.name, h.value))
            from unnest(response.headers) h
            where h.name in ('content-type')) as headers,
           convert_from(response.body, 'utf-8')::json                       as body
    from response
  results:
  - status: 200
    headers:
    - content-type: application/json
    body: "pong"

- name: No match when adding spurious parameters
  query: |
    with response as (select * from make_request('/rpc/ping?non_existing_parameter=true'))
    select response.status
    from response
  results:
  - status: 404
