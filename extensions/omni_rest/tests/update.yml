$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  config:
    shared_preload_libraries: */env/OMNI_SO
    max_worker_processes: 64
  init:
  - set session omni_httpd.init_port = 0
  - create extension omni_httpd cascade
  - create extension omni_httpc cascade
  # FIXME: waiting for two reloads is working around a startup bug in omni_httpd
  - call omni_httpd.wait_for_configuration_reloads(2)
  - create extension omni_rest cascade
  - create schema app
  - create schema app1
  - |
    create
        or
        replace function omni_httpd.handler(int, omni_httpd.http_request) returns omni_httpd.http_outcome
        language plpgsql
    as
    $$
    declare
        req  omni_httpd.http_request;
        resp omni_httpd.http_outcome;
    begin
        req := $2;
        raise notice '%', req;
        call omni_rest.postgrest(req, resp, omni_rest.postgrest_settings(schemas => '{app,app1}'));
        if resp is not distinct from null then
            resp := omni_httpd.http_response(status => 404);
        end if;
        return resp;
    end;
    $$
  - |
    create table app.users
    (
        id           serial primary key,
        name         text,
        email        text,
        profile_info jsonb
    )
  - |
    create table app1.users
    (
        id       serial primary key,
        username text
    )
  - |
    create function make_request(path text, headers omni_http.http_headers default array []::omni_http.http_headers,
                                 method omni_http.http_method default 'GET',
                                 body text default null) returns setof omni_httpc.http_response
        language sql as
    $$
    select *
    from omni_httpc.http_execute(
            omni_httpc.http_request('http://127.0.0.1:' ||
                                    (select effective_port from omni_httpd.listeners) ||
                                    path, method => method, headers => headers, body => convert_to(body, 'utf8')))
    $$

tests:

- name: simple update
  transaction: false
  steps:
  - query: insert into app.users values (default, 'John Doe', 'john@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users', method => 'PATCH',
                                          headers =>
                                              array [omni_http.http_header('content-type', 'application/json')],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select response.status
      from response
    results:
    - status: 201
  - query: select name, email, profile_info
           from app.users
    results:
    - name: New Name
      email: new@email.com
      profile_info: {}
  - name: cleanup
    query: delete
           from app.users

- name: Update multiple rows without filters
  transaction: false
  steps:
  - query: insert into app.users values ('1', 'John Doe', 'john@doe.com', '{}'), ('2', 'Jane Doe', 'jane@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users', method => 'PATCH',
                                          headers =>
                                              array [omni_http.http_header('content-type', 'application/json')],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select response.status
      from response
    results:
    - status: 201
  - query: select id, name, email, profile_info
           from app.users
           order by id
    results:
    - id: 1
      name: New Name
      email: new@email.com
      profile_info: {}
    - id: 2 
      name: New Name
      email: new@email.com
      profile_info: {}
  - name: cleanup
    query: delete
           from app.users

- name: Update with filter
  transaction: false
  steps:
  - query: insert into app.users values ('1', 'John Doe', 'john@doe.com', '{}'), ('2', 'Jane Doe', 'jane@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users?id=eq.1', method => 'PATCH',
                                          headers =>
                                              array [omni_http.http_header('content-type', 'application/json')],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select response.status
      from response
    results:
    - status: 201
  - query: select id, name, email, profile_info
           from app.users order by id
    results:
    - id: 1
      name: New Name
      email: new@email.com
      profile_info: {}
    - id: 2 
      name: Jane Doe
      email: jane@doe.com
      profile_info: {}
  - name: cleanup
    query: delete
           from app.users

- name: return representation
  transaction: false
  steps:
  - query: insert into app.users values ('1', 'John Doe', 'john@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users', method => 'PATCH',
                                          headers =>
                                              array [
                                                  omni_http.http_header('content-type', 'application/json'),
                                                  omni_http.http_header('prefer', 'return=representation')
                                          ],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select 
          response.status,
          convert_from(response.body, 'utf8')::jsonb as body
      from response
    results:
    - status: 201
      body:
      - id: 1
        name: New Name
        email: new@email.com
        profile_info: {}
  - name: cleanup
    query: delete from app.users

- name: tx-end rollback
  transaction: false
  steps:
  - query: insert into app.users values ('1', 'John Doe', 'john@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users', method => 'PATCH',
                                          headers =>
                                              array [
                                                  omni_http.http_header('content-type', 'application/json'),
                                                  omni_http.http_header('prefer', 'tx=rollback')
                                          ],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select response.status
      from response
    results:
    - status: 201
  - query: select name
           from app.users
            where name = 'New Name'
    results: [ ]
  - name: cleanup
    query: delete from app.users

- name: JSON insert into an invalid schema (using headers)
  transaction: false
  steps:
  - query: insert into app.users values ('1', 'John Doe', 'john@doe.com', '{}');
  - query: |
      with response as (select *
                        from make_request('/users', method => 'PATCH',
                                          headers =>
                                              array [
                                                  omni_http.http_header('content-type', 'application/json'),
                                                  omni_http.http_header('content-profile', 'public')
                                          ],
                                          body =>
                                                      jsonb_build_object('name',
                                                                         'New Name',
                                                                         'email',
                                                                         'new@email.com'
                                                                         )::text
                                                      ))
      select response.status
      from response
    results:
    - status: 404
  - query: select name
           from app.users
            where name = 'New Name'
    results: [ ]
  - name: cleanup
    query: delete from app.users

